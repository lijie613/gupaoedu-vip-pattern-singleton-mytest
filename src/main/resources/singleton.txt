1.单例常见写法
    1。饿汉式
        优点:没有加任何的锁、执行效率比较高，在用户体验上来说，比懒汉式更好。线程安全
        缺点:类加载的时候就初始化，不管用与不用都占着空间，浪费了内存，有可能占着茅 坑不拉屎。
    2。懒汉式
        a. 简单模式
        b. 检查锁简单模式
        c. 双重检查锁模式
        d. 内部类模式
        推荐使用内部类单例模式
        优点：使用的时候才加载，节省内存空间
        缺点：不加锁就会线程不安全，加锁能保证线程安全但执行效率不高，
                除了内部类模式，其他模式都被反射破坏单例性
    3。注册式单例
        a. 枚举登记单例
        优点：不用加锁也能满足线程安全，执行效率快，不被反序列化和反射破坏单例模式
        b. 容器缓存单例（Spring采用这种方式）
        优点：通过容器统一管理，适用于创建实例非常多的情况
        缺点：线程不安全，需要加锁才能满足线程安全
    4。ThreadLocal单例模式
        优点：在单个线程内部创建的对象是唯一
        缺点：在多个线程中创建的对象不同，线程不安全

2。破坏单例的方式
    1。反射
        内部类单例模式中 在私有构造器里增加内部类的对象判断就能避免反射破坏，如下
        private LazyInnerClassSingleton() {
            //默认使用 LazyInnerClassGeneral 的时候，会先初始化内部类
            if (LazyHolder.LAZY != null) {
                throw new RuntimeException("不允许创建多个实例");
            }
        }
    2。序列化对象和反序列化对象
        在对象内部加如下方法可以避免反序列化时重新创建新的对象
        private Object readResolve() {
            return INSTANCE;
        }